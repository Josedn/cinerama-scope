import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { AppThunk, RootState } from "../store";
import { fetchLogin } from "../clients/LoginClient";

export interface LoginState {
    token: string;
    status: "idle" | "loading" | "failed";
    errorMessage: string;
}

const initialState: LoginState = {
    token: "",
    status: "idle",
    errorMessage: "",
};

const showProgressThunkOptions = {
    getPendingMeta: () => {
        return { nprogress: true };
    }
};
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
    'login/fetchLogin',
    async (data: { username: string, password: string }, { extra, rejectWithValue, fulfillWithValue }) => {
        const response: LoginResult = await fetchLogin(data.username, data.password);
        // The value we return becomes the `fulfilled` action payload
        return response;
    }, showProgressThunkOptions);

interface LoginResult {
    data: string;
    error: string;
}

export const loginSlice = createSlice({
    name: 'login',
    initialState,
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
        oldlogIn: (state, action: PayloadAction<LoginResult>) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changesÆ’
            state.token = action.payload.data;
            state.errorMessage = action.payload.error;
        },
        oldlogOut: (state) => {
            state.token = "";
            state.errorMessage = "";
        },
        logIn: {
            reducer: (state, action: PayloadAction<LoginResult>) => {
                state.token = action.payload.data;
                state.errorMessage = action.payload.error;
            },
            prepare: (data: string, error: string) => {
                return { payload: { data, error } };
            }
        },
        logOut: {
            reducer: (state) => {
                state.token = "";
                state.errorMessage = "";
            },
            prepare: () => {
                return { payload: {}, something: { hello: true } };
            }
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loginAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(loginAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.token = action.payload.data;
                state.errorMessage = action.payload.error;
            })
            .addCase(loginAsync.rejected, (state) => {
                state.status = 'failed';
                state.token = "";
                state.errorMessage = "Something went wrong";
            });
    },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectToken = (state: RootState) => state.login.token;
export const selectErrorMessage = (state: RootState) => state.login.errorMessage;

export const { logIn, logOut } = loginSlice.actions;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const logOutIfLoggedIn =
    (): AppThunk =>
        (dispatch, getState) => {
            const isLoggedIn = selectToken(getState()).length > 0;
            if (isLoggedIn) {
                dispatch(logOut());
            }
        };

export default loginSlice.reducer;